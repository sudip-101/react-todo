{"version":3,"sources":["components/CreateTask/CreateTask.tsx","components/Task/Task.tsx","components/Todo/Todo.tsx","containers/TodoContainer.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["CreateTask","addTask","useState","Date","startDate","setStartDate","title","setTitle","time","setTime","className","selected","onChange","date","dateFormat","onSubmit","e","preventDefault","moment","format","htmlFor","type","value","name","id","placeholder","target","required","Task","todoMap","task","completeTask","index","removeTask","undoTask","style","textDecoration","done","onClick","Todo","Map","setTodoMap","prev","newMap","get","set","updateLocalStorage","localMap","json","JSON","stringify","localStorage","setItem","todoRemaining","React","useMemo","today","val","toISOString","filter","i","length","keys","map","key","window","confirm","splice","TodoContainer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e104d2bc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport \"./CreateTask.scss\";\r\nimport moment from \"moment\";\r\n\r\nconst CreateTask: React.FC<ICreateTaskProps> = ({ addTask }) => {\r\n  const [startDate, setStartDate] = useState<Date | null>(new Date());\r\n  const [title, setTitle] = useState<string>(\"\");\r\n  const [time, setTime] = useState<string>(\"\");\r\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    if (!title && !time) return;\r\n\r\n    addTask(title, time, moment(startDate).format(\"Do MMMM YYYY\"));\r\n    setTitle(\"\");\r\n    setTime(\"\");\r\n  };\r\n  return (\r\n    <div className=\"create-task\">\r\n      <div className=\"date-picker\">\r\n        <p>Add a Date -</p>\r\n        <DatePicker\r\n          selected={startDate}\r\n          onChange={(date: Date | null) => setStartDate(date)}\r\n          dateFormat={\"dd/MM/yyyy\"}\r\n        />\r\n      </div>\r\n      <form onSubmit={handleSubmit} className=\"create-form\">\r\n        <div className=\"form-detail new-todo\">\r\n          <label htmlFor=\"todo\">Add a New To-Do :</label>\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            value={title}\r\n            name=\"todo\"\r\n            id=\"todo\"\r\n            placeholder=\"Enter a To-Do\"\r\n            onChange={(e) => setTitle(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"form-detail todo-time\">\r\n          <label htmlFor=\"time\">Enter Deadline :</label>\r\n          <input\r\n            className=\"form-input time-input\"\r\n            type=\"time\"\r\n            value={time}\r\n            name=\"time\"\r\n            id=\"time\"\r\n            onChange={(e) => setTime(e.target.value)}\r\n            required\r\n          />\r\n        </div>\r\n        <div className=\"todo-save\">\r\n          <button className=\"submit-btn\" type=\"submit\">\r\n            Save\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CreateTask;\r\n","import React from \"react\";\r\nimport \"./Task.scss\";\r\n\r\nconst Task: React.FC<ITaskProps> = ({\r\n  todoMap,\r\n  task,\r\n  index,\r\n  completeTask,\r\n  removeTask,\r\n  undoTask,\r\n}) => {\r\n  return (\r\n    <div className=\"task\">\r\n      <div className=\"task-top\">\r\n        <h3\r\n          className=\"task-title\"\r\n          style={{ textDecoration: task.done ? \"line-through\" : \"\" }}\r\n        >\r\n          {task.title}\r\n        </h3>\r\n        <p>Deadline - {task.time}</p>\r\n      </div>\r\n      <div className=\"task-btn-container\">\r\n        {task.done ? (\r\n          <button className=\"btn-task\" onClick={undoTask}>\r\n            Undo\r\n          </button>\r\n        ) : (\r\n          <button className=\"btn-task\" onClick={completeTask}>\r\n            Complete\r\n          </button>\r\n        )}\r\n        <button className=\"btn-task\" onClick={removeTask}>\r\n          Remove\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport CreateTask from \"../CreateTask/CreateTask\";\r\nimport Task from \"../Task/Task\";\r\n\r\nconst Todo: React.FC = () => {\r\n  // useEffect(() => {\r\n  //   const json: string = localStorage.getItem(\"todoList\") || \"[]\";\r\n  //   const savedTasks = JSON.parse(json);\r\n  //   console.log(json);\r\n  //   if (savedTasks) {\r\n  //     setTodoMap(new Map(savedTasks));\r\n  //     console.log(savedTasks);\r\n  //   }\r\n  // }, []);\r\n  const [todoMap, setTodoMap] = useState<Map<string, ITaskArr[]>>(new Map([]));\r\n\r\n  const addTask = (title: string, time: string, date: string) => {\r\n    setTodoMap((prev) => {\r\n      const newMap = new Map(prev);\r\n      const val = newMap.get(date);\r\n      if (val) return newMap.set(date, [...val, { title, done: false, time }]);\r\n      return newMap.set(date, [{ title, done: false, time }]);\r\n    });\r\n    updateLocalStorage(todoMap);\r\n  };\r\n\r\n  const completeTask = (index: number, date: string, done: boolean) => {\r\n    setTodoMap((prev) => {\r\n      const newMap = new Map(prev);\r\n      const value = newMap.get(date);\r\n      if (value) {\r\n        value[index].done = done;\r\n        return newMap.set(date, [...value]);\r\n      }\r\n      return newMap;\r\n    });\r\n    updateLocalStorage(todoMap);\r\n  };\r\n\r\n  const removeTask = (index: number, date: string) => {\r\n    setTodoMap((prev) => {\r\n      const newMap = new Map(prev);\r\n      const value = newMap.get(date);\r\n      if (value) {\r\n        if (window.confirm(\"Do you want to remove the task?\"))\r\n          value.splice(index, 1);\r\n        return newMap.set(date, [...value]);\r\n      }\r\n      return newMap;\r\n    });\r\n    updateLocalStorage(todoMap);\r\n  };\r\n\r\n  const updateLocalStorage = (localMap: Map<string, ITaskArr[]>) => {\r\n    const json = JSON.stringify(localMap);\r\n    localStorage.setItem(\"todoList\", json);\r\n  };\r\n\r\n  const todoRemaining = React.useMemo(() => {\r\n    const today = new Date();\r\n    const val = todoMap.get(today.toISOString());\r\n    if (val) return val.filter((i) => i.done).length;\r\n    return 0;\r\n  }, [todoMap]);\r\n\r\n  return (\r\n    <div className=\"todos-box\">\r\n      <div className=\"header\">\r\n        <h1 className=\"logo\">To-Do Taker</h1>\r\n      </div>\r\n      <div className=\"create-task-container\">\r\n        <CreateTask addTask={addTask} />\r\n      </div>\r\n      <div className=\"todo-card-container\">\r\n        {[...todoMap.keys()].map((key) => (\r\n          <div className=\"card\">\r\n            <h2>{key}</h2>\r\n            <p className=\"pending-task\">Pending Tasks - {todoRemaining}</p>\r\n            <div className=\"task-container\">\r\n              {todoMap.get(key)?.map((task, index) => (\r\n                <Task\r\n                  todoMap={todoMap}\r\n                  task={task}\r\n                  key={index}\r\n                  index={index}\r\n                  completeTask={() => completeTask(index, key, true)}\r\n                  removeTask={() => removeTask(index, key)}\r\n                  undoTask={() => completeTask(index, key, false)}\r\n                />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Todo;\r\n","import React from \"react\";\r\nimport Todo from \"../components/Todo/Todo\";\r\n\r\nconst TodoContainer: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Todo />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TodoContainer;\r\n","import React from \"react\";\nimport \"./App.scss\";\nimport TodoContainer from \"./containers/TodoContainer\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <TodoContainer />\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}